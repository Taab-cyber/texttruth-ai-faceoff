import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card } from "@/components/ui/card";
import { Upload, Trash2, Brain, User, Loader2 } from "lucide-react";
import ConfidenceScore from "./ConfidenceScore";
import ExplanationCard from "./ExplanationCard";
import { useToast } from "@/hooks/use-toast";

interface DetectionResult {
  isAI: boolean;
  confidence: number;
  label: string;
  analysisFactors: {
    complexity: number;
    patterns: number;
    structure: number;
    vocabulary: number;
  };
}

const TextDetector = () => {
  const [text, setText] = useState("");
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState<DetectionResult | null>(null);
  const { toast } = useToast();

  const analyzeText = async () => {
    if (!text.trim()) {
      toast({
        title: "No text provided",
        description: "Please enter some text to analyze.",
        variant: "destructive",
      });
      return;
    }

    setIsAnalyzing(true);
    setResult(null);

    // Simulate AI analysis (replace with actual API call)
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Mock result based on text characteristics
    const wordCount = text.split(/\s+/).length;
    const hasComplexPunctuation = /[;:‚Äî‚Äì]/.test(text);
    const hasRepetitivePatterns = /(.{10,})\1/.test(text);
    
    const aiProbability = Math.min(90, Math.max(10, 
      (hasComplexPunctuation ? 20 : 0) + 
      (hasRepetitivePatterns ? 30 : 0) + 
      (wordCount > 100 ? 25 : 15) +
      Math.random() * 30
    ));

    const isAI = aiProbability > 50;
    
    // Generate analysis factors for visualization
    const analysisFactors = {
      complexity: Math.round(hasComplexPunctuation ? 75 + Math.random() * 20 : 40 + Math.random() * 30),
      patterns: Math.round(hasRepetitivePatterns ? 80 + Math.random() * 15 : 35 + Math.random() * 25),
      structure: Math.round(wordCount > 100 ? 70 + Math.random() * 25 : 45 + Math.random() * 30),
      vocabulary: Math.round(isAI ? 65 + Math.random() * 30 : 50 + Math.random() * 35)
    };
    
    setResult({
      isAI,
      confidence: Math.round(isAI ? aiProbability : 100 - aiProbability),
      label: isAI ? "AI-Generated" : "Human-Written",
      analysisFactors
    });

    setIsAnalyzing(false);
  };

  const clearText = () => {
    setText("");
    setResult(null);
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        setText(content);
        setResult(null);
      };
      reader.readAsText(file);
    }
  };

  return (
    <div className="w-full max-w-4xl mx-auto space-y-8">
      {/* Main Input Section */}
      <Card className="p-8 bg-surface border-border shadow-card">
        <div className="space-y-6">
          <div className="text-center space-y-2">
            <h2 className="text-2xl font-semibold text-foreground">
              AI Text Detection
            </h2>
            <p className="text-muted-foreground">
              Paste your text below to analyze if it was generated by AI or written by a human
            </p>
          </div>

          <div className="space-y-4">
            <Textarea
              placeholder="Enter or paste the text you want to analyze..."
              value={text}
              onChange={(e) => setText(e.target.value)}
              className="min-h-[200px] bg-background border-border focus:ring-primary focus:border-primary resize-none text-base"
            />
            
            <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
              <div className="flex gap-3">
                <Button
                  onClick={analyzeText}
                  disabled={isAnalyzing || !text.trim()}
                  className="bg-gradient-primary hover:bg-gradient-neon text-primary-foreground font-bold px-10 py-3 shadow-neon transition-all duration-500 transform hover:scale-105 hover:shadow-neon animate-glow-pulse"
                >
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                      üîç Analyzing...
                    </>
                  ) : (
                    <>
                      <Brain className="w-5 h-5 mr-2" />
                      üöÄ Detect Now
                    </>
                  )}
                </Button>

                <Button
                  onClick={clearText}
                  variant="outline"
                  disabled={!text.trim()}
                  className="border-border hover:bg-surface-hover"
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  Clear
                </Button>
              </div>

              <div className="flex items-center gap-3">
                <label htmlFor="file-upload" className="cursor-pointer">
                  <Button variant="outline" asChild className="border-border hover:bg-surface-hover">
                    <span>
                      <Upload className="w-4 h-4 mr-2" />
                      Upload File
                    </span>
                  </Button>
                </label>
                <input
                  id="file-upload"
                  type="file"
                  accept=".txt,.doc,.docx,.pdf"
                  onChange={handleFileUpload}
                  className="hidden"
                />
                <span className="text-xs text-muted-foreground">
                  .txt, .doc, .pdf
                </span>
              </div>
            </div>

            {text.trim() && (
              <div className="text-sm text-muted-foreground text-right">
                {text.split(/\s+/).length} words ‚Ä¢ {text.length} characters
              </div>
            )}
          </div>
        </div>
      </Card>

      {/* Results Section */}
      {result && (
        <Card className="p-8 bg-surface border-border shadow-card animate-scale-in">
          <div className="text-center space-y-8">
            <div className="flex items-center justify-center space-x-4">
              {result.isAI ? (
                <div className="p-3 rounded-full bg-gradient-primary shadow-neon">
                  <Brain className="w-8 h-8 text-primary-foreground animate-glow-pulse" />
                </div>
              ) : (
                <div className="p-3 rounded-full bg-gradient-to-br from-success to-green-400 shadow-glow">
                  <User className="w-8 h-8 text-white" />
                </div>
              )}
              <h3 className="text-3xl font-bold text-foreground animate-neon-pulse">
                üéØ Detection Results
              </h3>
            </div>

            <ConfidenceScore
              score={result.confidence}
              label={result.label}
              isVisible={true}
            />

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
              <div className="text-center p-6 rounded-xl bg-gradient-surface border border-border shadow-cyber hover:shadow-neon transition-all duration-300">
                <div className="text-sm text-muted-foreground mb-2 font-medium">üè∑Ô∏è Classification</div>
                <div className={`text-xl font-bold ${
                  result.isAI ? 'text-neon-pink animate-neon-pulse' : 'text-success'
                }`}>
                  {result.isAI ? 'ü§ñ ' : 'üë§ '}{result.label}
                </div>
              </div>
              <div className="text-center p-6 rounded-xl bg-gradient-surface border border-border shadow-cyber hover:shadow-neon transition-all duration-300">
                <div className="text-sm text-muted-foreground mb-2 font-medium">üìä Confidence</div>
                <div className="text-xl font-bold text-foreground">
                  ‚ö° {result.confidence}% certain
                </div>
              </div>
            </div>

            {/* Detailed Explanation and Analysis */}
            <div className="mt-8">
              <ExplanationCard
                isAI={result.isAI}
                confidence={result.confidence}
                wordCount={text.split(/\s+/).length}
                analysisFactors={result.analysisFactors}
              />
            </div>
          </div>
        </Card>
      )}

      {/* Info Section */}
      <div className="text-center text-sm text-muted-foreground">
        <p className="font-medium">‚ö° Powered by advanced AI detection algorithms üöÄ</p>
        <div className="mt-2 inline-block px-4 py-1 rounded-full bg-gradient-primary shadow-glow">
          <span className="text-primary-foreground text-xs font-bold">NEXT-GEN TECH</span>
        </div>
      </div>
    </div>
  );
};

export default TextDetector;